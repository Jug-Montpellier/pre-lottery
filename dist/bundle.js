(function () {
'use strict';

/**
 * Fetcher nb winners and time to get them
 * @param config: [language: string, url: string]
 * @param nb: int nb winners
 * @returns {Promise.<{winners: Array<{name}>, time: number}>}
 */
const fetchOne = (config, nb) => {
    const now = Date.now();
    let time;
    return fetch(`${config.url}/winners?nb=${nb}`).then((data) => {
        time = Date.now() - now;
        return data.json();
    }).then((res) => {
        return {winners: res, time: time, config: config, error: false};
    }, (error) => {
        return {winners: [], time: time, config: config, error: error};
    });
};

/**
 * Fetcher nb winners and time to get them
 * @param nb: int nb winners
 * @returns {Promise.<Array<{winners: Array<{name}>, time: number}>>}
 */
const fetchAll = (implementations, nb) => {
    return Promise.all(implementations.map((implementation) => {
        return fetchOne(implementation, nb);
    }));
};

const implementations = [{
    language: 'NodeJs',
    url: 'http://lottery.jug-montpellier.org'
}, {
    language: 'Scala',
    url: 'http://lottery-scala.jug-montpellier.org'
}, {
    language: 'Go',
    url: 'http://lottery-go.jug-montpellier.org'
}];

const shuffle = (a) => {
    for (let i = a.length; i; i--) {
        let j = Math.floor(Math.random() * i);
        [a[i - 1], a[j]] = [a[j], a[i - 1]];
    }
    return a;
};

const strashipWidth = 10;
const strashipHeight = 5;

const preparePercentSize = (canvas) => {
    const widthPercentToPx = (x) => Math.floor(x * canvas.width / 100);
    const heightPercentToPx = (y) => Math.floor(y * canvas.height / 100);
    return {widthPercentToPx, heightPercentToPx};
};

const buildStarship = function(implementation, canvas, isPlayer, index) {
    const context = canvas.getContext('2d');
    const {widthPercentToPx, heightPercentToPx} = preparePercentSize(canvas);
    const initPos = {
        x: widthPercentToPx(index * strashipWidth),
        y: heightPercentToPx(isPlayer ? 100 : 0),
        width: widthPercentToPx(strashipWidth),
        height: heightPercentToPx(strashipHeight)
    };
    return {
        pos: initPos,
        draw: (pos=initPos) => {
            context.beginPath();
            context.moveTo(pos.x, pos.y);
            context.lineTo(pos.x + pos.width, pos.y);
            if(isPlayer) {
                context.lineTo(pos.x + pos.width / 2, pos.y - pos.height);
            } else {
                context.lineTo(pos.x + pos.width / 2, pos.y + pos.height);
            }
            context.fill();
            return pos;
        }
    };
};

const buildStarships = (implementations, canvas) => {
    const starchips = implementations.map((implementation, index) => {
        return buildStarship(implementation, canvas, false, index);
    }).concat(buildStarship(null, canvas, true, 0));
    const ctrl = {
        clearAndDraw: () => {
            canvas.width = 80 * window.innerWidth / 100;
            canvas.height = 80 * window.innerHeight / 100;
            starchips.forEach(s => s.pos = s.draw(s.pos));
        },
        move: () => {
            starchips.forEach((s) => s.pos.x = s.pos.x + strashipWidth);
            ctrl.clearAndDraw();
        }
    };
    return ctrl;
};

document.addEventListener('DOMContentLoaded', () => {
    const canvas = document.querySelector('#canvas');
    const starshipsCtrl = buildStarships(implementations, canvas);
    starshipsCtrl.clearAndDraw();

    setTimeout(() => starshipsCtrl.move(), 1000);
    setTimeout(() => starshipsCtrl.move(), 2000);
    setTimeout(() => starshipsCtrl.move(), 3000);
    setTimeout(() => starshipsCtrl.move(), 4000);

    window.addEventListener('resize', () => starshipsCtrl.clearAndDraw());

    fetchAll(shuffle(implementations), 1).then((data) => {
        console.log(data);
    });

});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyIuLi9mZXRjaGVyL2ZldGNoZXIuanMiLCIuLi9mZXRjaGVyL2ltcGxlbWVudGF0aW9ucy5qcyIsIi4uL2ZldGNoZXIvdXRpbHMuanMiLCIuLi9mZXRjaGVyL3N0YXJzaGlwLmpzIiwiLi4vZmV0Y2hlci9tYWluLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRmV0Y2hlciBuYiB3aW5uZXJzIGFuZCB0aW1lIHRvIGdldCB0aGVtXG4gKiBAcGFyYW0gY29uZmlnOiBbbGFuZ3VhZ2U6IHN0cmluZywgdXJsOiBzdHJpbmddXG4gKiBAcGFyYW0gbmI6IGludCBuYiB3aW5uZXJzXG4gKiBAcmV0dXJucyB7UHJvbWlzZS48e3dpbm5lcnM6IEFycmF5PHtuYW1lfT4sIHRpbWU6IG51bWJlcn0+fVxuICovXG5jb25zdCBmZXRjaE9uZSA9IChjb25maWcsIG5iKSA9PiB7XG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICBsZXQgdGltZTtcbiAgICByZXR1cm4gZmV0Y2goYCR7Y29uZmlnLnVybH0vd2lubmVycz9uYj0ke25ifWApLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgdGltZSA9IERhdGUubm93KCkgLSBub3c7XG4gICAgICAgIHJldHVybiBkYXRhLmpzb24oKTtcbiAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgcmV0dXJuIHt3aW5uZXJzOiByZXMsIHRpbWU6IHRpbWUsIGNvbmZpZzogY29uZmlnLCBlcnJvcjogZmFsc2V9O1xuICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICByZXR1cm4ge3dpbm5lcnM6IFtdLCB0aW1lOiB0aW1lLCBjb25maWc6IGNvbmZpZywgZXJyb3I6IGVycm9yfTtcbiAgICB9KTtcbn07XG5cbi8qKlxuICogRmV0Y2hlciBuYiB3aW5uZXJzIGFuZCB0aW1lIHRvIGdldCB0aGVtXG4gKiBAcGFyYW0gbmI6IGludCBuYiB3aW5uZXJzXG4gKiBAcmV0dXJucyB7UHJvbWlzZS48QXJyYXk8e3dpbm5lcnM6IEFycmF5PHtuYW1lfT4sIHRpbWU6IG51bWJlcn0+Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IGZldGNoQWxsID0gKGltcGxlbWVudGF0aW9ucywgbmIpID0+IHtcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoaW1wbGVtZW50YXRpb25zLm1hcCgoaW1wbGVtZW50YXRpb24pID0+IHtcbiAgICAgICAgcmV0dXJuIGZldGNoT25lKGltcGxlbWVudGF0aW9uLCBuYik7XG4gICAgfSkpO1xufTtcbiIsImV4cG9ydCBjb25zdCBpbXBsZW1lbnRhdGlvbnMgPSBbe1xuICAgIGxhbmd1YWdlOiAnTm9kZUpzJyxcbiAgICB1cmw6ICdodHRwOi8vbG90dGVyeS5qdWctbW9udHBlbGxpZXIub3JnJ1xufSwge1xuICAgIGxhbmd1YWdlOiAnU2NhbGEnLFxuICAgIHVybDogJ2h0dHA6Ly9sb3R0ZXJ5LXNjYWxhLmp1Zy1tb250cGVsbGllci5vcmcnXG59LCB7XG4gICAgbGFuZ3VhZ2U6ICdHbycsXG4gICAgdXJsOiAnaHR0cDovL2xvdHRlcnktZ28uanVnLW1vbnRwZWxsaWVyLm9yZydcbn1dOyIsImV4cG9ydCBjb25zdCBzaHVmZmxlID0gKGEpID0+IHtcbiAgICBmb3IgKGxldCBpID0gYS5sZW5ndGg7IGk7IGktLSkge1xuICAgICAgICBsZXQgaiA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGkpO1xuICAgICAgICBbYVtpIC0gMV0sIGFbal1dID0gW2Fbal0sIGFbaSAtIDFdXTtcbiAgICB9XG4gICAgcmV0dXJuIGE7XG59OyIsImNvbnN0IHN0cmFzaGlwV2lkdGggPSAxMDtcbmNvbnN0IHN0cmFzaGlwSGVpZ2h0ID0gNTtcblxuY29uc3QgcHJlcGFyZVBlcmNlbnRTaXplID0gKGNhbnZhcykgPT4ge1xuICAgIGNvbnN0IHdpZHRoUGVyY2VudFRvUHggPSAoeCkgPT4gTWF0aC5mbG9vcih4ICogY2FudmFzLndpZHRoIC8gMTAwKTtcbiAgICBjb25zdCBoZWlnaHRQZXJjZW50VG9QeCA9ICh5KSA9PiBNYXRoLmZsb29yKHkgKiBjYW52YXMuaGVpZ2h0IC8gMTAwKTtcbiAgICByZXR1cm4ge3dpZHRoUGVyY2VudFRvUHgsIGhlaWdodFBlcmNlbnRUb1B4fTtcbn07XG5cbmNvbnN0IGJ1aWxkU3RhcnNoaXAgPSBmdW5jdGlvbihpbXBsZW1lbnRhdGlvbiwgY2FudmFzLCBpc1BsYXllciwgaW5kZXgpIHtcbiAgICBjb25zdCBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgY29uc3Qge3dpZHRoUGVyY2VudFRvUHgsIGhlaWdodFBlcmNlbnRUb1B4fSA9IHByZXBhcmVQZXJjZW50U2l6ZShjYW52YXMpO1xuICAgIGNvbnN0IGluaXRQb3MgPSB7XG4gICAgICAgIHg6IHdpZHRoUGVyY2VudFRvUHgoaW5kZXggKiBzdHJhc2hpcFdpZHRoKSxcbiAgICAgICAgeTogaGVpZ2h0UGVyY2VudFRvUHgoaXNQbGF5ZXIgPyAxMDAgOiAwKSxcbiAgICAgICAgd2lkdGg6IHdpZHRoUGVyY2VudFRvUHgoc3RyYXNoaXBXaWR0aCksXG4gICAgICAgIGhlaWdodDogaGVpZ2h0UGVyY2VudFRvUHgoc3RyYXNoaXBIZWlnaHQpXG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICBwb3M6IGluaXRQb3MsXG4gICAgICAgIGRyYXc6IChwb3M9aW5pdFBvcykgPT4ge1xuICAgICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgIGNvbnRleHQubW92ZVRvKHBvcy54LCBwb3MueSk7XG4gICAgICAgICAgICBjb250ZXh0LmxpbmVUbyhwb3MueCArIHBvcy53aWR0aCwgcG9zLnkpO1xuICAgICAgICAgICAgaWYoaXNQbGF5ZXIpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVUbyhwb3MueCArIHBvcy53aWR0aCAvIDIsIHBvcy55IC0gcG9zLmhlaWdodCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKHBvcy54ICsgcG9zLndpZHRoIC8gMiwgcG9zLnkgKyBwb3MuaGVpZ2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRleHQuZmlsbCgpO1xuICAgICAgICAgICAgcmV0dXJuIHBvcztcbiAgICAgICAgfVxuICAgIH07XG59O1xuXG5leHBvcnQgY29uc3QgYnVpbGRTdGFyc2hpcHMgPSAoaW1wbGVtZW50YXRpb25zLCBjYW52YXMpID0+IHtcbiAgICBjb25zdCBzdGFyY2hpcHMgPSBpbXBsZW1lbnRhdGlvbnMubWFwKChpbXBsZW1lbnRhdGlvbiwgaW5kZXgpID0+IHtcbiAgICAgICAgcmV0dXJuIGJ1aWxkU3RhcnNoaXAoaW1wbGVtZW50YXRpb24sIGNhbnZhcywgZmFsc2UsIGluZGV4KTtcbiAgICB9KS5jb25jYXQoYnVpbGRTdGFyc2hpcChudWxsLCBjYW52YXMsIHRydWUsIDApKTtcbiAgICBjb25zdCBjdHJsID0ge1xuICAgICAgICBjbGVhckFuZERyYXc6ICgpID0+IHtcbiAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IDgwICogd2luZG93LmlubmVyV2lkdGggLyAxMDA7XG4gICAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gODAgKiB3aW5kb3cuaW5uZXJIZWlnaHQgLyAxMDA7XG4gICAgICAgICAgICBzdGFyY2hpcHMuZm9yRWFjaChzID0+IHMucG9zID0gcy5kcmF3KHMucG9zKSk7XG4gICAgICAgIH0sXG4gICAgICAgIG1vdmU6ICgpID0+IHtcbiAgICAgICAgICAgIHN0YXJjaGlwcy5mb3JFYWNoKChzKSA9PiBzLnBvcy54ID0gcy5wb3MueCArIHN0cmFzaGlwV2lkdGgpO1xuICAgICAgICAgICAgY3RybC5jbGVhckFuZERyYXcoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIGN0cmw7XG59OyIsImltcG9ydCB7ZmV0Y2hBbGx9IGZyb20gJy4vZmV0Y2hlcic7XG5pbXBvcnQge2ltcGxlbWVudGF0aW9uc30gZnJvbSAnLi9pbXBsZW1lbnRhdGlvbnMnO1xuaW1wb3J0IHtzaHVmZmxlfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7YnVpbGRTdGFyc2hpcHN9IGZyb20gJy4vc3RhcnNoaXAnO1xuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xuICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjYW52YXMnKTtcbiAgICBjb25zdCBzdGFyc2hpcHNDdHJsID0gYnVpbGRTdGFyc2hpcHMoaW1wbGVtZW50YXRpb25zLCBjYW52YXMpO1xuICAgIHN0YXJzaGlwc0N0cmwuY2xlYXJBbmREcmF3KCk7XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHN0YXJzaGlwc0N0cmwubW92ZSgpLCAxMDAwKTtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHN0YXJzaGlwc0N0cmwubW92ZSgpLCAyMDAwKTtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHN0YXJzaGlwc0N0cmwubW92ZSgpLCAzMDAwKTtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHN0YXJzaGlwc0N0cmwubW92ZSgpLCA0MDAwKTtcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCAoKSA9PiBzdGFyc2hpcHNDdHJsLmNsZWFyQW5kRHJhdygpKTtcblxuICAgIGZldGNoQWxsKHNodWZmbGUoaW1wbGVtZW50YXRpb25zKSwgMSkudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcbiAgICB9KTtcblxufSk7Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBOzs7Ozs7QUFNQSxNQUFNLFFBQVEsR0FBRyxDQUFDLE1BQU0sRUFBRSxFQUFFLEtBQUs7SUFDN0IsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDO0lBQ1QsT0FBTyxLQUFLLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLEVBQUUs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
